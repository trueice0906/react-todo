{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","toDos","items","map","toDo","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","item","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVA0BeA,MAtBf,SAAmBC,GACnB,IACMC,EADQD,EAAME,MACAC,KAAI,SAAAC,GAER,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC3B,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAC7CC,SAAY,SAACC,GACTZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACxC,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QACtCC,QAAY,WAAQhB,EAAMiB,WAAWb,EAAKE,cAMtE,OACI,iCAAOL,EAAP,M,iBCdhBiB,IAAQC,IAAIC,K,IAwFGC,E,kDArFb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAEDsB,MAAQ,CACXpB,MAAQ,GACRqB,YAAc,CACZb,KAAM,GACNJ,IAAM,KAGV,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAbA,E,wDAgBPb,GACVe,KAAKC,SAAU,CACbL,YAAc,CACZb,KAAOE,EAAEE,OAAOL,MAChBH,IAAMuB,KAAKC,W,8BAMTlB,GACNA,EAAEmB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAoB,KAAjBS,EAAQtB,KAAa,CACpB,IAAMuB,EAAQ,sBAAON,KAAKL,MAAMpB,OAAlB,CAAwB8B,IACtCL,KAAKC,SAAS,CACV1B,MAAQ+B,EACRV,YAAc,CACZb,KAAO,GACPJ,IAAM,S,iCAMPA,GACT,IAAM4B,EAAgBP,KAAKL,MAAMpB,MAAMiC,QAAO,SAAAC,GAAI,OAChDA,EAAK9B,MAAMA,KACbqB,KAAKC,SAAS,CACZ1B,MAAOgC,M,gCAIDxB,EAAKJ,GACb,IAAMJ,EAAQyB,KAAKL,MAAMpB,MACzBA,EAAMC,KAAI,SAAAiC,GACLA,EAAK9B,MAAQA,IACd8B,EAAK1B,KAAKA,MAGdiB,KAAKC,SAAS,CACZ1B,MAAQA,M,+BAKV,OACE,yBAAKG,UAAY,OACf,gCACE,0BAAMG,GAAG,aAAa6B,SAAYV,KAAKD,SACrC,2BACEnB,KAAK,OACL+B,YAAc,gBACd7B,MAASkB,KAAKL,MAAMC,YAAYb,KAChCC,SAAYgB,KAAKH,cAEnB,4BAAQjB,KAAK,UAAb,QAGN,kBAAC,EAAD,CAAWL,MAAOyB,KAAKL,MAAMpB,MAAOe,WAAYU,KAAKV,WAAYJ,UAAWc,KAAKd,kB,GA5ErE0B,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2633b3e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItem.css\"\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'; \r\n\r\nfunction ListItems(props) {\r\nconst items = props.items\r\nconst toDos = items.map(toDo => \r\n            {\r\n                return <div className=\"list\" key={toDo.key}>\r\n                            <p>\r\n                                <input type=\"text\" id={toDo.key} value={toDo.text}\r\n                                onChange = {(e) => {\r\n                                    props.setUpdate(e.target.value,toDo.key)}}/>\r\n                                <span>\r\n                                    <FontAwesomeIcon className=\"faicons\" icon=\"trash\"\r\n                                        onClick = { () => { props.deleteItem(toDo.key) }}/>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                })\r\n            \r\n            return (\r\n                <div> {toDos} </div>\r\n            )                  \r\n        }\r\n\r\nexport default ListItems\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function ListItems(props) {\r\n//     const Todos=props.Todo;\r\n//     const listItems = Todos.map(todo =>\r\n//         {\r\n//             return <div className=\"list\" key={todo.key}>\r\n//                 <p>{todo.text}\r\n//                 <span>\r\n//                     <FontAwesomeIcon \r\n//                     className=\"faicons\" \r\n//                     icon=\"trash\"\r\n//                     onClick = { () => {\r\n//                         props.deleteItem(todo.key)\r\n//                     }}\r\n//                     />\r\n//                 </span>\r\n//                 </p>\r\n                \r\n             \r\n//             </div>\r\n//         })\r\n        \r\n//         return(\r\n//             <div>{listItems}</div>\r\n//         )\r\n// }\r\n\r\n// export default ListItems\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function ListItem(props) {\r\n\r\n//     const items=props.items;\r\n//     const listItems= items.map(item =>\r\n//         {\r\n//             return <div className=\"list\" key=\"item.key\">\r\n//                 <p>{item.text}</p>\r\n//             </div>\r\n//         })\r\n\r\n//     return( \r\n//         <div>{listItems}</div>\r\n//     )\r\n\r\n// }\r\n\r\n// export default ListItem","\nimport React from 'react';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport ListItems from \"./ListItem\";\nimport { library }from '@fortawesome/fontawesome-svg-core';\nimport { faTrash }from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items : [],\n      currentItem : {\n        text: \"\",\n        key : \"\"\n      }\n    }\n    this.handleInput = this.handleInput.bind(this)\n    this.addItem = this.addItem.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.setUpdate = this.setUpdate.bind(this)\n  }\n  \n  handleInput(e) {\n    this.setState ({\n      currentItem : {\n        text : e.target.value,\n        key : Date.now()\n      \n      }\n    })\n  }\n\n  addItem(e) {\n    e.preventDefault()\n    const newItem = this.state.currentItem\n    if(newItem.text !== \"\") {\n        const newItems = [...this.state.items,newItem]\n        this.setState({\n            items : newItems,\n            currentItem : {\n              text : \"\",\n              key : \"\"\n            }\n          })\n    }\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item=>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  setUpdate(text,key) {\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items : items\n    })\n  }\n    \n  render() {\n    return (\n      <div className = \"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit = {this.addItem}>\n            <input \n              type=\"text\"\n              placeholder = \"Enter text...\"\n              value = {this.state.currentItem.text}\n              onChange = {this.handleInput}\n              />\n            <button type=\"submit\">Add</button>\n          </form>\n      \n      <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}></ListItems>\n\n        </header>  \n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class App extends React.Component { \n//   constructor(props){\n//     super(props);\n    \n//     this.state = {\n//       items:[],\n//       currentItem:{\n//         text:'',\n//         key:''\n        \n//     }\n//   }\n//   this.handleInput = this.handleInput.bind(this);\n//   this.addItem = this.addItem.bind(this);\n//   this.deleteItem = this.deleteItem.bind(this);\n// }\n\n//     handleInput(e){\n//       this.setState({\n//         currentItem : {\n//           text : e.target.value,\n//           key: Date.now()\n//         }\n//       })\n//     }\n\n//     addItem(e){\n//       e.preventDefault();\n//       const newItem = this.state.currentItem\n//       if(newItem.text !== \"\") {\n//         const newItems = [...this.state.items,newItem]\n//         this.setState({\n//           items: newItems,\n//           currentItem : {\n//               text : \"\",\n//               key: \"\"\n//           }\n//         })\n//       }\n//     }\n\n//     deleteItem(key){\n        \n//         const filteredItems =this.state.items.filter(item =>\n//           item.key!==key);\n//           this.setState = ({\n//             items : filteredItems\n//           })\n//     }\n\n//     render() {\n//       return (\n//       <div className=\"App\">  \n//         <header>\n//         <form id=\"to-do-form\" onSubmit={this.addItem}>\n//           <input\n//             type=\"text\"\n//             placeholder = \"Enter text...\"\n//             value = {this.state.currentItem.text}\n//             onChange = {this.handleInput}          \n//           />\n//           <button type=\"submit\">Add</button>\n//         </form>\n//        </header>\n//        <ListItems \n//        Todo={this.state.items}\n//        deleteItem = {this.deleteItem}/>\n        \n//      </div> \n//   )\n// }\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}